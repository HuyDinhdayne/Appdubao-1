# -*- coding: utf-8 -*-
"""App-kltn-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y4iRwqZRq7fT_djE1lXeBHf0kw8ykqJZ
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile financial_report_app.py
# !pip install -q streamlit
# !npm install localtunnel
# import streamlit as st
# import pandas as pd
# import joblib
# import numpy as np
# # ===== 1. Load m√¥ h√¨nh Random Forest v√† scaler =====
# model = joblib.load("bankruptcy_model_RF_1 (1).pkl")
# scaler = joblib.load("scaler (1).pkl")
# 
# # ===== 2. C·∫•u h√¨nh giao di·ªán =====
# st.set_page_config(page_title="D·ª± b√°o ph√° s·∫£n doanh nghi·ªáp x√¢y d·ª±ng", layout="centered")
# st.title("üèóÔ∏è D·ª∞ B√ÅO R·ª¶I RO PH√Å S·∫¢N DOANH NGHI·ªÜP X√ÇY D·ª∞NG")
# st.markdown("·ª®ng d·ª•ng k·∫øt h·ª£p m√¥ h√¨nh h·ªçc m√°y Random Forest v√† m√¥ h√¨nh Z‚Äô‚Äô-score m·ªü r·ªông.")
# 
# st.header("üì• Nh·∫≠p th√¥ng tin t√†i ch√≠nh doanh nghi·ªáp")
# 
# # ===== 3. Nh·∫≠p d·ªØ li·ªáu ng∆∞·ªùi d√πng =====
# X1 = st.number_input("X1: V·ªën l∆∞u ƒë·ªông / T·ªïng t√†i s·∫£n", value=0.0, format="%.4f")
# X2 = st.number_input("X2: L·ª£i nhu·∫≠n gi·ªØ l·∫°i / T·ªïng t√†i s·∫£n", value=0.0, format="%.4f")
# X3 = st.number_input("X3: EBIT / T·ªïng t√†i s·∫£n", value=0.0, format="%.4f")
# X4 = st.number_input("X4: V·ªën ch·ªß s·ªü h·ªØu / T·ªïng n·ª£ ph·∫£i tr·∫£", value=0.0, format="%.4f")
# X5 = st.number_input("X5: T·ªïng n·ª£ ph·∫£i tr·∫£ / T·ªïng t√†i s·∫£n", value=0.0, format="%.4f")
# X6 = st.number_input("X6: T·ª∑ su·∫•t sinh l·ªùi tr√™n t·ªïng t√†i s·∫£n (ROA)", value=0.0, format="%.2f")
# 
# # ===== 4. N√∫t d·ª± b√°o =====
# if st.button("üìä Th·ª±c hi·ªán d·ª± b√°o"):
# 
#     # D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh h·ªçc m√°y (Random Forest)
#     input_df = pd.DataFrame([[X1, X2, X3, X4, X5, X6]], columns=['X1', 'X2', 'X3', 'X4', 'X5', 'X6'])
#     scaled_input = scaler.transform(input_df)
#     rf_pred = model.predict(scaled_input)[0]
#     rf_proba = model.predict_proba(scaled_input)[0]
# 
#     # D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh Z‚Äô‚Äô-score (gi·∫£ ƒë·ªãnh h·ªá s·ªë)
#     # H·ªá s·ªë tham kh·∫£o t·ª´ m√¥ h√¨nh Z‚Äô‚Äô d√†nh cho doanh nghi·ªáp phi s·∫£n xu·∫•t (kh√¥ng c√≥ X5)
#     z_score = 6.56*X1 + 3.26*X2 + 6.72*X3 + 1.05*X4
# 
#     # Ph√¢n lo·∫°i theo Z‚Äô‚Äô
#     if z_score < 1.1:
#         z_risk = "‚ùå R·ªßi ro cao"
#     elif z_score < 2.6:
#         z_risk = "‚ö†Ô∏è C·∫£nh b√°o"
#     else:
#         z_risk = "‚úÖ An to√†n"
# 
#     # Ph√¢n lo·∫°i Random Forest
#     rf_label_map = {
#         0: "‚úÖ An to√†n",
#         1: "‚ö†Ô∏è C·∫£nh b√°o",
#         2: "‚ùå R·ªßi ro cao"
#     }
# 
#     # ===== 5. Hi·ªÉn th·ªã k·∫øt qu·∫£ =====
#     st.success("üéØ D·ª± b√°o ho√†n t·∫•t")
# 
#     col1, col2 = st.columns(2)
# 
#     with col1:
#         st.subheader("ü§ñ M√¥ h√¨nh Random Forest")
#         st.write("**Ph√¢n lo·∫°i:**", rf_label_map[rf_pred])
#         st.write("**X√°c su·∫•t:**")
#         st.write(f"- An to√†n (0): {rf_proba[0]*100:.2f}%")
#         st.write(f"- C·∫£nh b√°o (1): {rf_proba[1]*100:.2f}%")
#         st.write(f"- R·ªßi ro cao (2): {rf_proba[2]*100:.2f}%")
# 
#     with col2:
#         st.subheader("üìê M√¥ h√¨nh Z‚Äô‚Äô-score truy·ªÅn th·ªëng")
#         st.write("**Z‚Äô‚Äô-score:**", f"{z_score:.4f}")
#         st.write("**Ph√¢n lo·∫°i:**", z_risk)
# 
#     # ===== 6. So s√°nh k·∫øt qu·∫£ =====
#     st.markdown("---")
#     st.subheader("üîç So s√°nh hai m√¥ h√¨nh")
# 
#     if rf_label_map[rf_pred] == z_risk:
#         st.success("‚úÖ Hai m√¥ h√¨nh ƒë·ªìng thu·∫≠n v·ªÅ r·ªßi ro.")
#     else:
#         st.warning("‚ö†Ô∏è C√≥ s·ª± kh√°c bi·ªát gi·ªØa d·ª± ƒëo√°n c·ªßa Random Forest v√† Z‚Äô‚Äô-score.")
# 
#     st.markdown("**Ghi ch√∫:** M√¥ h√¨nh Z‚Äô‚Äô s·ª≠ d·ª•ng 4 bi·∫øn t√†i ch√≠nh; Random Forest s·ª≠ d·ª•ng 6 bi·∫øn n√™n c√≥ th·ªÉ cho k·∫øt qu·∫£ kh√°c nhau trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p.")
# 
#     # ===== 7. Xu·∫•t b·∫£ng t·ªïng h·ª£p =====
#     st.markdown("### üßæ T·ªïng h·ª£p ch·ªâ s·ªë t√†i ch√≠nh")
#     st.dataframe(pd.DataFrame([{
#         "X1": X1, "X2": X2, "X3": X3,
#         "X4": X4, "X5": X5, "X6": X6,
#         "Z‚Äô‚Äô-score": round(z_score, 4),
#         "ML_Prediction": rf_label_map[rf_pred]
#     }]))
#

# !npm install -g localtunnel

# !streamlit run financial_report_app.py &>/dev/null &

# import urllib
# print("Password/Enpoint IP for localtunnel is:",urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))
# !npx localtunnel --port 8501